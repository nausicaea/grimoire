name: grimoire
services:
  tor:
    image: nausicaea/tor:latest
    build:
      context: tor
      args:
        TOR_INTERNAL_ALIAS: tor-internal.docker
        TOR_SOCKS_PORT: 9050
    networks:
      outside: {}
      internal:
        aliases:
          - tor-internal.docker
    restart: always

  mitmproxy:
    image: nausicaea/mitmproxy:latest
    build:
      context: mitmproxy
    volumes:
      - mitmproxy-data:/data
    networks:
      internal: {}
    restart: always

  postgres:
    image: docker.io/library/postgres:16-alpine
    volumes:
      - ./postgres:/docker-entrypoint-initdb.d:ro
      - postgres-data:/var/lib/postgresql/data
    environment:
      POSTGRES_PASSWORD: $POSTGRES_PASSWORD
      RECON_DB_PASSWORD: $RECON_DB_PASSWORD
    networks:
      outside: {}
      internal: {}
    restart: always

  cert-recon:
    image: nausicaea/cert-recon:latest
    build:
      context: .
      args:
        ARCH: aarch64-unknown-linux-musl
        PACKAGE: cert-recon
        AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
        AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
        SCCACHE_BUCKET: ${SCCACHE_BUCKET}
        SCCACHE_ENDPOINT: ${SCCACHE_ENDPOINT}
    environment:
      RECON_DB_HOST: postgres
      RECON_DB_PASSWORD: $RECON_DB_PASSWORD
    command: "--help"
    networks:
      outside: {}

  dns-recon:
    image: nausicaea/dns-recon:latest
    build:
      context: .
      args:
        ARCH: aarch64-unknown-linux-musl
        PACKAGE: dns-recon
        AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
        AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
        SCCACHE_BUCKET: ${SCCACHE_BUCKET}
        SCCACHE_ENDPOINT: ${SCCACHE_ENDPOINT}
    environment:
      DNS_SERVER: tor-internal.docker
      RECON_DB_HOST: postgres
      RECON_DB_PASSWORD: $RECON_DB_PASSWORD
    command: "--help"
    networks:
      internal: {}

  http-recon:
    image: nausicaea/http-recon:latest
    build:
      context: .
      args:
        ARCH: aarch64-unknown-linux-musl
        PACKAGE: http-recon
        AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
        AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
        SCCACHE_BUCKET: ${SCCACHE_BUCKET}
        SCCACHE_ENDPOINT: ${SCCACHE_ENDPOINT}
    environment:
      PROXY: socks5h://tor-internal.docker:9050/
      RECON_DB_HOST: postgres
      RECON_DB_PASSWORD: $RECON_DB_PASSWORD
    command: "--help"
    networks:
      internal: {}

volumes:
  mitmproxy-data: {}
  postgres-data: {}
    
networks:
  outside:
    driver: bridge

  internal:
    driver: bridge
    internal: true
    ipam:
      config:
        - subnet: 172.16.1.0/24
